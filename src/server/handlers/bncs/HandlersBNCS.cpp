#include "HandlersBNCS.hpp"
#include "Logger.hpp"
#include "packet/opcodes8.hpp"

#include <algorithm>

using namespace HandlersBNCS;

void HandlersBNCS::dispatch(std::shared_ptr<ClientSession> session, BNETPacket8 &p) {
    BNETOpcode8 opcode = p.get_id();

    switch (opcode) {
        case BNETOpcode8::SID_NULL:
            handle_sid_null(session, p);
            break;

        case BNETOpcode8::SID_INIT:
            handle_sid_init(session, p);
            break;

        case BNETOpcode8::SID_PING:
            handle_ping(session, p);
            break;

        case BNETOpcode8::SID_AUTH_INFO:
            handle_auth_info(session, p);
            break;

        default:
            Logger::get()->warn("[handler] Unknown opcode: {}", static_cast<uint8_t>(opcode));
            break;
    }
}

void HandlersBNCS::handle_sid_null(std::shared_ptr<ClientSession> session, BNETPacket8 &p) {
    Logger::get()->debug("[handler] SID_NULL");
    BNETPacket8 reply(BNETOpcode8::SID_NULL);
    session->send_packet(reply);
}

void HandlersBNCS::handle_sid_init(std::shared_ptr<ClientSession> session, BNETPacket8 &p) {
    Logger::get()->debug("[handler] SID_INIT");
    BNETPacket8 reply(BNETOpcode8::SID_INIT);
    session->send_packet(reply);
}

void HandlersBNCS::handle_ping(std::shared_ptr<ClientSession> session, BNETPacket8 &p) {
    Logger::get()->debug("[handler] CMSG_PING");
    uint32_t pingval = p.read_uint32();

    BNETPacket8 reply(BNETOpcode8::SID_PING);
    reply.write_uint32(pingval);

    session->send_packet(reply);
}

void HandlersBNCS::handle_auth_info(std::shared_ptr<ClientSession> session, BNETPacket8 &p) {
    Logger::get()->debug("[handler] SID_AUTH_INFO");

    uint32_t protocol = p.read_uint32(); //–í–µ—Ä—Å–∏—è BNCS –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ (—á–∞—Å—Ç–æ 0)

    /** ‚úÖ –ß—Ç–æ —Ç–∞–∫–æ–µ archtag ?
archtag (IX86 –≤ Warcraft III) ‚Äî —ç—Ç–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –∑–∞–ø—É—â–µ–Ω –∫–ª–∏–µ–Ω—Ç:
–ó–Ω–∞—á–µ–Ω–∏–µ	–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞
IX86 (0x49583836)	Intel x86 –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ (Windows PC)
PMAC	PowerPC Macintosh
X64	64-bit –≤–∞—Ä–∏–∞–Ω—Ç (–≤ –∫–ª–∞—Å—Å–∏–∫–µ –Ω–µ—Ç)

üîë PvPGN –æ–±—ã—á–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç archtag, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π (PC, Mac).
–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏: –Ω–∞ PvPGN –¥–ª—è Warcraft III –æ–Ω –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ IX86.

üëâ –í–ª–∏—è–µ—Ç –ª–∏ –Ω–∞ –ª–æ–≥–∏–∫—É?
–ü—Ä—è–º–æ –Ω–µ—Ç ‚Äî —ç—Ç–æ —á–∏—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø–æ–ª–µ.
–ú–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –≤—ã–±–æ—Ä EXE hash –∏–ª–∏ MPQ filename ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ Mac –∫–ª–∏–µ–Ω—Ç –¥—Ä—É–≥–æ–π –ø–∞—Ç—á-—Ñ–∞–π–ª.
–°–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ, —á—Ç–æ–±—ã –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π checksum formula.**/
    uint32_t archtag = p.read_uint32(); //–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä IX86)

    /** –ß—Ç–æ —Ç–∞–∫–æ–µ clienttag ?
clienttag ‚Äî —ç—Ç–æ –ø—Ä–æ–¥—É–∫—Ç.
–≠—Ç–æ –∫–ª—é—á–µ–≤–æ–π —Ç–µ–≥, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å –∫–∞–∫–æ–π –∏–≥—Ä–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç.

–ó–Ω–∞—á–µ–Ω–∏–µ	–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞
WAR3 (0x57415233)	Warcraft III: Reign of Chaos
W3XP (0x57335850)	Warcraft III: The Frozen Throne
D2DV	Diablo II Vanilla
D2XP	Diablo II Expansion
STAR	StarCraft
SEXP	StarCraft: Brood War
W2BN	Warcraft II BNE
JSTR	Japanese StarCraft **/
    uint32_t clienttag = p.read_uint32(); // –ü—Ä–æ–¥—É–∫—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä WAR3 –∏–ª–∏ W3XP)
    uint32_t versionid = p.read_uint32(); // –í–µ—Ä—Å–∏—è exe-—Ñ–∞–π–ª–∞
    uint32_t gamelang = p.read_uint32(); //	–Ø–∑—ã–∫ –∏–≥—Ä—ã
    uint32_t localip = p.read_uint32(); // –õ–æ–∫–∞–ª—å–Ω—ã–π IP –∫–ª–∏–µ–Ω—Ç–∞
    uint32_t timezone_bias = p.read_uint32(); // –°–º–µ—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
    uint32_t lcid = p.read_uint32(); // Windows LCID
    uint32_t langid = p.read_uint32(); // Windows LangID

    std::string langstr = p.read_string(); // –Ø–∑—ã–∫ —Å—Ç—Ä–æ–∫–æ–π ("enUS")
    std::string countrystr = p.read_string(); // –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã ("United States")

    session->setArchTag(archtag);
    session->setClientTag(clienttag);
    session->setVersionId(versionid);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏
    uint32_t server_token_ = static_cast<uint32_t>(std::rand());
    session->setServerToken(server_token_);

    BNETPacket8 reply(BNETOpcode8::SID_AUTH_CHECK);
    reply.write_uint32(server_token_);
    reply.write_uint32(0); // UDP value
    reply.write_string("War3Patch.mpq");
    reply.write_uint32(0); // value1
    reply.write_uint32(0); // value2
    reply.write_uint32(0); // value3
    reply.write_uint32(0); // exe_info
    reply.write_string("IX86Ver1.mpq"); // —Ñ–æ—Ä–º—É–ª–∞ ‚Äî –¥–ª—è –≤–∏–¥–∞
    session->send_packet(reply);
}