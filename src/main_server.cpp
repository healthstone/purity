#include "server/Server.hpp"
#include "Database.hpp"
#include <boost/asio.hpp>
#include <iostream>
#include <csignal>

int main() {
    Logger::init_thread_pool();  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å thread pool –¥–æ –ø–µ—Ä–≤–æ–≥–æ –ª–æ–≥–∞!
    auto log = Logger::get();

    try {
        // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–¥–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        unsigned int network_threads = std::thread::hardware_concurrency();
        if (network_threads > 2) {
            network_threads -= 1; // –æ—Å—Ç–∞–≤–∏–º 1 –ø–æ—Ç–æ–∫ –ø–æ–¥ —Å–∏—Å—Ç–µ–º—É –∏ –ª–æ–≥–∏, –µ—Å–ª–∏ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –º–∞–ª–æ
        } else if (network_threads == 0) {
            network_threads = 1; // –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
        int port = 12345;

        // –ï–¥–∏–Ω—ã–π thread pool –Ω–∞ –≤—Å—ë –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        boost::asio::thread_pool pool(network_threads);

        // üü¢ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–µ–¥–∞—ë–º —Ç–æ—Ç –∂–µ –ø—É–ª!)
        std::string db_host = std::getenv("DB_URL") ? std::getenv("DB_URL") : "127.0.0.1";
        log->debug("DB_URL={}", db_host);

        std::string db_port = std::getenv("DB_PORT") ? std::getenv("DB_PORT") : "5432";
        log->debug("DB_PORT={}", db_port);

        std::string db_user = std::getenv("DB_USER") ? std::getenv("DB_USER") : "postgres";
        log->debug("DB_USER={}", db_user);

        std::string db_password = std::getenv("DB_PASSWORD") ? std::getenv("DB_PASSWORD") : "postgres";
        log->debug("DB_PASSWORD={}", db_password);

        std::string db_name = std::getenv("DB_NAME") ? std::getenv("DB_NAME") : "postgres";
        log->debug("DB_NAME={}", db_name);

        auto db = std::make_shared<Database>(fmt::format("host={} port={} user={} password={} dbname={}",
                                                         db_host, db_port, db_user, db_password, db_name),
                                             network_threads); // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–≤–æ—è —Å–µ—Å—Å–∏—è –∫ –±–¥

        // –°–µ—Ä–≤–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ pool –∏ –≥–æ—Ç–æ–≤—É—é –ë–î
        auto server = std::make_shared<Server>(pool, pool.get_executor(), db, port);

        server->start_accept();

        log->info("[Server] Running on port {}", port);

        // –ü–µ—Ä–µ—Ö–≤–∞—Ç SIGINT/SIGTERM
        boost::asio::signal_set signals(pool.get_executor(), SIGINT, SIGTERM);
        signals.async_wait([&](const boost::system::error_code &, int signal_number) {
            Logger::get()->info("[Server] Signal {} received, shutting down...", signal_number);
            server->stop();
            pool.stop();
        });

        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ worker-–ø–æ—Ç–æ–∫–∏
        pool.join();

        log->info("[Server] Gracefully shut down.");

    } catch (const std::exception &e) {
        Logger::get()->error("[Server] Exception: {}", e.what());
    }

    return 0;
}
